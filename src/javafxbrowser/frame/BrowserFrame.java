package javafxbrowser.frame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import javafx.application.Platform;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import static javafx.concurrent.Worker.State.FAILED;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebEvent;
import javafx.scene.web.WebHistory;
import javafx.scene.web.WebView;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author henry varona
 */
public class BrowserFrame extends javax.swing.JFrame {

    private WebEngine engine;
    private String currentURL = "";

    /**
     * Creates new form MainFrame
     */
    public BrowserFrame() {
        super();
        initComponents();

        ActionListener al = (ActionEvent e) -> {
            System.out.println(e.getActionCommand());
            loadURL(textURL.getText());
        };
        goButton.addActionListener(al);
        textURL.addActionListener(al);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browserPanel = new javafx.embed.swing.JFXPanel();
        createScene();
        jPanel1 = new javax.swing.JPanel();
        loadingBar = new javax.swing.JProgressBar();
        textStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        backwardButton = new javax.swing.JButton();
        fowardButton = new javax.swing.JButton();
        stopRefreshButton = new javax.swing.JButton();
        textURL = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadingBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textStatus, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        backwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javafxbrowser/frame/icon/arrow--icon-left.png"))); // NOI18N
        backwardButton.setToolTipText("Backward");
        backwardButton.setEnabled(false);
        backwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardButtonActionPerformed(evt);
            }
        });

        fowardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javafxbrowser/frame/icon/arrow--icon-right.png"))); // NOI18N
        fowardButton.setToolTipText("Foward");
        fowardButton.setEnabled(false);
        fowardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fowardButtonActionPerformed(evt);
            }
        });

        stopRefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javafxbrowser/frame/icon/refresh-icon.png"))); // NOI18N
        stopRefreshButton.setToolTipText("Refresh");
        stopRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRefreshButtonActionPerformed(evt);
            }
        });

        goButton.setText("GO");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(backwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(fowardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textURL, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backwardButton)
            .addComponent(fowardButton)
            .addComponent(stopRefreshButton)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(textURL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(goButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(browserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fowardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fowardButtonActionPerformed
        final WebHistory history = engine.getHistory();
        ObservableList<WebHistory.Entry> entryList = history.getEntries();
        int currentIndex = history.getCurrentIndex();
        if (currentIndex < entryList.size() - 1) {
            Platform.runLater(() -> {
                history.go(1);
            });
        }
    }//GEN-LAST:event_fowardButtonActionPerformed

    private void stopRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRefreshButtonActionPerformed
        Platform.runLater(() -> {
            if (engine.getLoadWorker().isRunning()) {
                engine.getLoadWorker().cancel();
                loadingBar.setValue(0);
                loadingBar.setVisible(false);
                enableDisableButtons();
            } else if (!currentURL.isEmpty()) {
                engine.load(currentURL);
            }
        });
    }//GEN-LAST:event_stopRefreshButtonActionPerformed

    private void backwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardButtonActionPerformed
        final WebHistory history = engine.getHistory();
        int currentIndex = history.getCurrentIndex();
        if (currentIndex > 0) {
            Platform.runLater(() -> {
                history.go(-1);
            });
        }
    }//GEN-LAST:event_backwardButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed

    }//GEN-LAST:event_goButtonActionPerformed

    private void createScene() {

        Platform.runLater(() -> {
            WebView view = new WebView();
            engine = view.getEngine();

            engine.titleProperty().addListener((ObservableValue<? extends String> observable, String oldValue, final String newValue) -> {
                SwingUtilities.invokeLater(() -> {
                    BrowserFrame.this.setTitle(newValue);

                });
            });
            

            engine.setOnStatusChanged((final WebEvent<String> event) -> {
                SwingUtilities.invokeLater(() -> {
                    textStatus.setText(event.getData());
                });
            });

            engine.locationProperty().addListener((ObservableValue<? extends String> ov, String oldValue, final String newValue) -> {
                SwingUtilities.invokeLater(() -> {
                    textURL.setText(newValue);
                    currentURL = newValue;
                    enableDisableButtons();
                });
            });

            engine.getLoadWorker().workDoneProperty().addListener((ObservableValue<? extends Number> observableValue, Number oldValue, final Number newValue) -> {
                SwingUtilities.invokeLater(() -> {
                    if (newValue.intValue() >= 100) {
                        loadingBar.setValue(0);
                        loadingBar.setVisible(false);
                        enableDisableButtons();
                    } else {
                        loadingBar.setValue(newValue.intValue());
                        loadingBar.setVisible(true);
                        enableDisableButtons();
                    }
                });
            });

            engine.getLoadWorker()
                    .exceptionProperty()
                    .addListener((ObservableValue<? extends Throwable> o, Throwable old, final Throwable value) -> {
                        if (engine.getLoadWorker().getState() == FAILED) {
                            SwingUtilities.invokeLater(() -> {
                                loadingBar.setValue(0);
                                loadingBar.setVisible(false);
                                textStatus.setText("Error on Page");
                                enableDisableButtons();
                                JOptionPane.showMessageDialog(
                                        rootPane,
                                        (value != null)
                                                ? engine.getLocation() + "\n" + value.getMessage()
                                                : engine.getLocation() + "\nUnexpected error.",
                                        "Loading error...",
                                        JOptionPane.ERROR_MESSAGE);
                            });
                        }
                    });
            engine.getLoadWorker().runningProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) -> {
                if (newValue) {
                    stopRefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javafxbrowser/frame/icon/stop-icon.png"))); // NOI18N
                    stopRefreshButton.setToolTipText("Stop");
                } else {
                    stopRefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javafxbrowser/frame/icon/refresh-icon.png"))); // NOI18N
                    stopRefreshButton.setToolTipText("Refresh");
                }
            });

            browserPanel.setScene(new Scene(view));
        });

    }

    public void loadURL(final String url) {
        Platform.runLater(() -> {
            String tmp = toURL(url);
            if (tmp == null) {
                tmp = toURL("http://" + url);
            }
            engine.load(tmp);
        });
    }

    private void enableDisableButtons() {
        final WebHistory history = engine.getHistory();
        ObservableList<WebHistory.Entry> entryList = history.getEntries();
        if (history.getCurrentIndex() > 0) {
            backwardButton.setEnabled(true);
        } else {
            backwardButton.setEnabled(false);
        }
        if (history.getCurrentIndex() < entryList.size() - 1) {
            fowardButton.setEnabled(true);
        } else {
            fowardButton.setEnabled(false);
        }
    }

    private static String toURL(String str) {
        try {
            return new URL(str).toExternalForm();
        } catch (MalformedURLException exception) {
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardButton;
    private javafx.embed.swing.JFXPanel browserPanel;
    private javax.swing.JButton fowardButton;
    private javax.swing.JButton goButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JButton stopRefreshButton;
    private javax.swing.JLabel textStatus;
    private javax.swing.JTextField textURL;
    // End of variables declaration//GEN-END:variables
}
